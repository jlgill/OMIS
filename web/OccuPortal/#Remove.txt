/**
 * =====================================
 * #Remove ( parameters ; removeParameters )
 *
 * RETURNS:
 *		A #-format dictionary based on parameters, but with all values named in
 *		removeParameters removed.
 *
 * PARAMETERS:
 *		parameters: A string of name-value pairs
 *		removeParameters: The names of name-value pairs to remove.
 *
 * DEPENDENCIES: none
 *
 * NOTES:
 *		This is a recursive function.
 *
 * HISTORY:
 *		MODIFIED on 2013-12-24 by Jeremy Bante <http://scr.im/jbante> to improve
 *		efficiency.
 *		MODIFIED on 2013-12-23 by John Jones
 *		<john.christopher@alumn.virginia.edu> to use Middle/Position instead of
 *		GetValue.
 *		MODIFIED on 2013-03-15 by Daniel Smith <http://scr.im/dansmith> to add
 *		trailing return if it doesn't exist.
 *		MODIFIED on 2013-01-08 by Jeremy Bante <http://scr.im/jbante> to extend
 *		the function to remove multiple names from a return-delimited list.
 *		CREATED on 2012-12-20 by Daniel Smith <http://scr.im/dansmith>
 * =====================================
 */

Case (
	/* Step 0, set-up */
	not $#Remove.step ;
		Let ( [
			~empty = IsEmpty ( parameters ) or IsEmpty ( removeParameters ) ;
			removeParameters =	// add "$" prefix for matching
				Substitute ( ¶ & removeParameters ; ¶ ; "¶$" ) ;
			removeParameters =	// add "$$" prefix for backwards-compatibility
				removeParameters
				& Substitute ( removeParameters ; ¶ ; "¶$" )
				& ¶ ;
			$#Remove.length = Length ( parameters ) ;
			$#Remove.step = If ( ~empty ; -1 ; /* Else */ 1 )
		] ;
			#Remove ( parameters ; removeParameters )
		) ;

	/* Step 1, check each parameter */
	$#Remove.step = 1 ;
		Let ( [
			~start = $#Remove.end + 1 ;
			$#Remove.end = Position ( parameters ; ¶ ; ~start ; 1 ) ;
			~endOfList = $#Remove.end = 0 ;
			~length =
				If ( ~endOfList ;
					$#Remove.length + 1 ;
					/* Else */ $#Remove.end
				)
				- ~start ;
			~pair = Middle ( parameters ; ~start ; ~length ) ;
			~name = Left ( ~pair ; Position ( ~pair ; " = " ; 1 ; 1 ) - 1 ) ;
			~include =	// only include if ~name is not in removeParameters
				not IsEmpty ( ~name )
				and Position ( removeParameters ; ¶ & ~name & ¶ ; 1 ; 1 ) = 0 ;
			$#Remove.result =
				$#Remove.result
				& If ( ~include ; ~pair & ¶ ) ;

			~endOfList = ~endOfList or $#Remove.end ≥ $#Remove.length ;
			$#Remove.step =
				If ( ~endOfList ; $#Remove.step + 1 ; /* Else */ $#Remove.step )
		] ;
			#Remove ( parameters ; removeParameters )
		) ;

	/* Step 2, clean-up and return result */
	$#Remove.step = 2 or $#Remove.step = -1 ;
		Let ( [
			~empty = $#Remove.step = -1 ;
			~result = If ( ~empty ; parameters ; /* Else */ $#Remove.result ) ;

			// purge variables
			$#Remove.end = "" ;
			$#Remove.length = "" ;
			$#Remove.result = "" ;
			$#Remove.step = ""
		] ;
			~result
		)
)