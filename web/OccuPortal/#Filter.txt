/**
 * =====================================
 * #Filter ( parameters ; filterParameters )
 *
 * RETURNS:
 *		A list of Let notation name-value pairs from parameters with names in
 *		filterParameters. Any pairs with names not in filterParameters will not
 *		be included.
 *
 * PARAMETERS:
 *		parameters: A string of serialized name-value pair data in Let notation.
 *		filterParameters: A return-delimited list of parameter names to include
 *		in the result.
 *
 * EXAMPLE:
 *		#Assign ( #Filter (
 *			# ( "name" ; "value" )
 *			& # ( "foo" ; "bar" );
 *			List ( "name" ; "otherName" )
 *		) )
 *		// variable $name assigned "value"; $foo and $otherName are unaffected
 *
 * DEPENDENCIES: none
 *
 * HISTORY:
 *		MODIFIED on 2013-12-24 by Jeremy Bante <http://scr.im/jbante> to improve
 *		efficiency.
 *		MODIFIED on 2013-12-23 by John Jones <john.christopher@alumni.virginia.edu>
 *		to use Position/Middle.  Modified to add trailing return if it doesn't
 *		exist.
 *		CREATED on 2012-11-28 by Jeremy Bante <http://scr.im/jbante>.
 * =====================================
 */

Case (
	/* Step 0, set-up */
	not $#Filter.step ;
		Let ( [
			~empty = IsEmpty ( parameters ) or IsEmpty ( filterParameters ) ;
			filterParameters =	// add "$" prefix for matching
				Substitute ( ¶ & filterParameters ; ¶ ; "¶$" ) ;
			filterParameters =	// add "$$" prefix for backwards-compatibility
				filterParameters
				& Substitute ( filterParameters ; ¶ ; "¶$" )
				& ¶ ;
			$#Filter.length = Length ( parameters ) ;
			$#Filter.step = If ( ~empty ; 2 ; /* Else */ 1 )
		] ;
			#Filter ( parameters ; filterParameters )
		) ;

	/* Step 1, check each parameter */
	$#Filter.step = 1 ;
		Let ( [
			~start = $#Filter.end + 1 ;
			$#Filter.end = Position ( parameters ; ¶ ; ~start ; 1 ) ;
			~endOfList = $#Filter.end = 0 ;
			~length =
				If ( ~endOfList ;
					$#Filter.length + 1 ;
					/* Else */ $#Filter.end
				)
				- ~start ;
			~pair = Middle ( parameters ; ~start ; ~length ) ;
			~name = Left ( ~pair ; Position ( ~pair ; " = " ; 1 ; 1 ) - 1 ) ;
			~include =	// only include ~pair if ~name is in filterParameters
				Position ( filterParameters ; ¶ & ~name & ¶ ; 1 ; 1 ) > 0 ;
			$#Filter.result =
				$#Filter.result
				& If ( ~include ; ~pair & ¶ ) ;

			~endOfList = ~endOfList or $#Filter.end ≥ $#Filter.length ;
			$#Filter.step =
				If ( ~endOfList ; $#Filter.step + 1 ; /* Else */ $#Filter.step )
		] ;
			#Filter ( parameters ; filterParameters )
		) ;

	/* Step 2, clean-up and return result */
	$#Filter.step = 2 ;
		Let ( [
			~result = $#Filter.result ;

			// purge variables
			$#Filter.end = "" ;
			$#Filter.length = "" ;
			$#Filter.result = "" ;
			$#Filter.step = ""
		] ;
			~result
		)
)