/**
 * =====================================
 * UUIDTimeStamp
 *
 * PURPOSE:
 *		Creates a universally unique identifier suitable for use as a primary
 *		key in FileMaker number fields. The UUID is an encoding of the creation
 *		timestamp, a serial number, and random numbers. This may be useful in
 *		some situations to preserve the anonymity of the device that generated
 *		the UUID. The values returned by this and related functions have a
 *		one-to-one correspondence with UUIDs following the RFC 4122 standard all
 *		values in the format generated by this function can be converted to
 *		RFC 4122, and vice versa.
 *
 * RETURNS:
 *		A 41-digit delimited number of the form:
 *		v-r-tttttttttttt-sssssss-ccccc@nnnnnnnnnnnnnnn
 *		The sections of the UUID correspond to:
 *		v: A UUID version (type) number
 *		r: A variant code reserved by the RFC 4122 standard
 *		t: The creation timestamp (seconds since 0001-01-01T00:00:00)
 *		s: A serial number, reset for each second
 *		c: A "clock sequence" key, randomly generated for each session
 *		n: The randomly-generated "node" for a session
 *
 * PARAMETERS: none
 *
 * DEPENDENCIES: none
 *
 * VARIABLES:
 *		$$~UUID_DATA[2]
 *
 * NOTES:
 *		For most practical purposes, FileMaker will ignore the text delimiters
 *		in values returned by this function.
 *
 *		This function generates UUIDs that are meaningfully sortable. Values
 *		sort by version, then approximate creation order. Because of the leading
 *		sort by version, random (version 4) values (where the creation order
 *		cannot be determined by the values) will cluster separately from
 *		timestamp-node (version 1) values.
 *
 *		The value can be converted to RFC 4122 canonical form (hexadecimal) with
 *		the UUIDGetAsRFC4122 function. The creation timestamp can be extracted
 *		with the UUIDGetSeconds function.
 *
 * RELEASE: 2011-02-25
 *
 * REFERENCES:
 *		Key values Best Practice: http://filemakerstandards.org/display/bp/Key+values
 *		RFC 4122 standard UUID specification: http://tools.ietf.org/html/rfc4122
 *		Tom Robinson's UUID function: http://www.briandunning.com/cf/969
 *		Ray Cologon's uID functions: http://www.nightwing.com.au/FileMaker/demos9/demo910.html
 * =====================================
 */

Let ( [
	//Set-up timestamp, serial number, and session key
	~session = GetValue ( $$~UUID_DATA[2] ; 1 );
	~lastTimestamp = GetValue ( $$~UUID_DATA[2] ; 2 );
	~serial = GetValue ( $$~UUID_DATA[2] ; 3 );
	~node = GetValue ( $$~UUID_DATA[2] ; 4 );

	~now =
		Mod (
			GetAsNumber ( Get ( CurrentHostTimestamp ) );
			165208454460
		);
	~session =
		Case (
			IsEmpty ( ~session ); //new session
				Floor ( Random * 16384 );

			~serial â‰¥ 9999999 //serial number overflow
			and ~now = ~lastTimestamp
			or ~now < ~lastTimestamp; //clock change
				Mod ( ~session + 1 ; 16384 );

			/*else*/
				~session
		);
	~serial =
		If ( ~now = ~lastTimestamp;
			Mod ( ~serial + 1 ; 10000000 );
			/*else*/ 0
		);
	~node =
		If ( ~node;
			~node;
		/*Else, new random node*/
			//set multicast bit to avoid colliding with NIC addresses
			( Floor ( Random * 128 ) *2 + 1 ) * 1099511627776
			+ Floor ( Random * 1099511627776 )
		);

	//Store data for future reference
	$$~UUID_DATA[2] = List ( ~session ; ~now ; ~serial ; ~node )
];
	//v-r-tttt tttt tttt-sss ssss-ccccc@nnnnn nnnnn nnnnn
	"1-2-" //version and reserved variant code
	& Right ( "000000000000" & ~now ; 12 )
	& "-"
	& Right ( "0000000" & ~serial ; 7 )
	& "-"
	& Right ( "00000" & ~session ; 5 )
	& "-"
	& Right ( "000000000000000" & ~node ; 15 )
)