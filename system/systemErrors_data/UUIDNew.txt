/**
 * =====================================
 * UUIDNew
 *		https://github.com/petrowsky/fmpstandards/blob/master/Functions/UUIDNew.fmfn
 *
 * PURPOSE:
 *		Creates a universally unique identifier suitable for use as a primary
 *		key in FileMaker number fields. The UUID is an encoding of the creation
 *		timestamp, a serial number, and the NIC (MAC) address of the device that
 *		created the UUID. The values returned by this and related functions have
 *		a one-to-one correspondence with UUIDs following the RFC 4122 standard
 *		all values in the format generated by this function can be converted to
 *		RFC 4122, and vice versa.
 *
 * RETURNS:
 *		A 41-digit delimited number of the form:
 *		v-r-tttttttttttt-sssssss-ccccc@nnnnnnnnnnnnnnn
 *		The sections of the UUID correspond to:
 *		v: A UUID version (type) number
 *		r: A variant code reserved by the RFC 4122 standard
 *		t: The creation timestamp (seconds since 0001-01-01T00:00:00)
 *		s: A serial number, reset for each second
 *		c: A session key, randomly generated for each session
 *		n: The NIC address ("node") of the device that created the UUID
 *
 * PARAMETERS: none
 *
 * DEPENDENCIES: none
 *
 * VARIABLES:
 *		$$~UUID_DATA
 *
 * NOTES:
 *		For most practical purposes, FileMaker will ignore the text delimiters
 *		in values returned by this function.
 *
 *		This function generates UUIDs that are meaningfully sortable. Values
 *		sort by version, then approximate creation order. Because of the leading
 *		sort by version, random (version 4) values (where the creation order
 *		cannot be determined by the values) will cluster separately from
 *		timestamp-node (version 1) values.
 *
 *		The value can be converted to RFC 4122 canonical form (hexadecimal) with
 *		the UUIDGetAsRFC4122 function. The creation timestamp and NIC (MAC)
 *		address can be extracted with the UUIDGetTimestamp and UUIDGetNICAddress
 *		functions.
 *
 * RELEASE: 2011-02-23
 *
 * REFERENCES:
 *		Key values Best Practice: http://filemakerstandards.org/display/bp/Key+values
 *		RFC 4122 standard UUID specification: http://tools.ietf.org/html/rfc4122
 *		RFC 5322 Internet Message Format specification: http://www.rfc-editor.org/rfc/rfc5322.txt
 *		Tom Robinson's UUID function: http://www.briandunning.com/cf/969
 *		Ray Cologon's uID functions: http://www.nightwing.com.au/FileMaker/demos9/demo910.html
 *		UUIDGetAsRFC4122: http://www.briandunning.com/cf/1221
 *		UUIDGetAsUUID: http://www.briandunning.com/cf/1273
 *		UUIDGetNICAddress: http://www.briandunning.com/cf/1222
 *		UUIDGetSeconds: http://www.briandunning.com/cf/1223
 *		UUIDNew: http://www.briandunning.com/cf/1220
 *		UUIDRandom: http://www.briandunning.com/cf/1246
 * =====================================
 */

Case (
	/*First call to UUIDNew, check for pre-processed session/node data*/
	not $~step;
		Let ( [
				$~node = GetValue ( $$~UUID_DATA ; 1 );
				$~step = If ( $~node ; 3 ; /*else*/ 1 )
		];
			UUIDNew
		);

	/*Get NIC address, if possible*/
	$~step = 1;
		Let ( [
			$~nicAddress = Substitute ( GetValue ( Get ( SystemNICAddress ) ; 1 ); ":" ; "" );
			$~i = 0;
			$~step = If ( $~nicAddress ; $~step + 1 ; /*else*/ -1 )
		];
			UUIDNew
		);

	/*Parse NIC address from hexadecimal to a (base 10) number*/
	$~step = 2;
		Let ( [
			$~nicDigit = Middle ( $~nicAddress ; 12 - $~i ; 1 );
			$~nicDigit = Position ( "0123456789abcdefg" ; $~nicDigit ; 1 ; 1 ) - 1; //convert digit to number
			$~node = $~nicDigit * ( 16 ^ $~i ) + $~node; //add digit to node
			$~step = If ( $~i < 11 ; $~step ; /*else*/ $~step + 1  );
			$~i = $~i + 1
		];
			UUIDNew
		);

	/*Concatenate information*/
	$~step = 3;
		Let ( [
			//Set-up timestamp, serial number, and session key
			~session = GetValue ( $$~UUID_DATA ; 2 );
			~lastTimestamp = GetValue ( $$~UUID_DATA ; 3 );
			~serial = GetValue ( $$~UUID_DATA ; 4 );

			~now =
				Mod (
					GetAsNumber ( Get ( CurrentHostTimestamp ) );
					165208454460
				);
			~session =
				Case (
					IsEmpty ( ~session ); //new session
						Floor ( Random * 16384 );

					~serial â‰¥ 9999999 //serial number overflow
					and ~now = ~lastTimestamp;
						Mod ( ~session + 1 ; 16384 );

					/*else*/
						~session
				);
			~serial =
				If ( ~now = ~lastTimestamp;
					Mod ( ~serial + 1 ; 10000000 );
					/*else*/ 0
				);
			~node = $~node;
			
			//Store data for future reference
			$$~UUID_DATA = List ( ~node ; ~session ; ~now ; ~serial );

			//purge variables
			$~i = "";
			$~nicAddress = "";
			$~nicDigit = "";
			$~node = "";
			$~step = ""
		];
			//v-r-tttt tttt tttt-sss ssss-ccccc@nnnnn nnnnn nnnnn
			"1-2-" //version and reserved variant code
			& Right ( "000000000000" & ~now ; 12 )
			& "-"
			& Right ( "0000000" & ~serial ; 7 )
			& "-"
			& Right ( "00000" & ~session ; 5 )
			& "@"
			& Right ( "000000000000000" & ~node ; 15 ) 
		);

	/*No NIC address, use Random numbers instead*/
	$~step = -1;
		Let ( [
			//purge variables
			$~i = "";
			$~nicAddress = "";
			$~node = "";
			$~step = ""
		];
			//v-r-tttt tttt tttt-sss ssss-ccccc-nnnnn nnnnn nnnnn
			"4-2-" //version and reserved variant code
			& Right ( "000000000000" & Floor ( Random * 165208454460 ) ; 12 )
			& "-"
			& Right ( Random ; 7 )
			& "-"
			& Right ( "00000" & Floor ( Random * 16384 ) ; 5 )
			& "-"
			& Right ( "000000000000000" & Floor ( Random * 281474976710656 ) ; 15 )
		)
)