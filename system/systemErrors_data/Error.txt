/**
 * =====================================
 * Error ( )
 *
 * PURPOSE:
 *		Assign reserved $error* variables to contain a package of
 *		useful error handing information. Default assignment assumes
 *		a FileMaker error and can be overridden to contain errors
 *		related to plugins, the solution or other custom functions.
 *		
 * RETURNS:
 *		A Let() formatted array of error $variables and error related data
 *		
 * PARAMETERS:
 *		none
 *
 * EXAMPLES:
 * 		Error // to return information about an internal FileMaker error
 *		# ( "$error" ; Error ) // passing the packed $error variable into a script
 *		# ( "$error" ; Error  & # ( "$errorHalt" ; False ) & # ( "$errorDialog" ; False ) & # ( "$errorCapture" ; False ) ) // inline overrides
 *
 * DEPENDENCIES:
 *		ErrorString(), ErrorData()
 *
 * NOTES:
 *		Error handling can be accomplished in a variety of ways when scripting.
 *		This function returns a pre-defined set of reserved variables for use
 *		when handling errors. The variables declared below should ONLY be used
 *		within your solution for the purpose of error handling.
 *		IMPORTANT!! When capturing errors, you should handle the error within
 *		the script where the error might occur. This allows you to know which
 *		script caused the error.
 *
 * HISTORY:
 *		MODIFIED on 2011-03-20 by matt@filemakermagazine.com - reformatted
 *
 * REFERENCES:
 *		none
 * =====================================
 */

Let (
	~error = Get ( LastError );
	
	Substitute ( // add semi-colons for proper Let() formatting
		List (
			"$errorState = " & If ( ~error ≠ 0 ; True ; False );
			"$errorType = " & Quote ( "fmp" ); // enumeration fmp, app, plugin, func
			"$errorNum = " & ~error; // set to your own error or plugin error when overriding
			"$errorString = " & Quote ( ErrorString ( If ( IsEmpty ( $errorType ) ; "fmp" ; $errorType ) ; ~error ) ); // set your own string if needed
			"$errorScript = " & Quote ( Get ( ScriptName ) );
			// only set defaults if not already set
			"$errorHalt = " & If ( not IsEmpty ( $errorHalt ) ; $errorHalt ; True );
			"$errorDialog = " & If ( not IsEmpty ( $errorDialog ) ; $errorDialog ; True );
			"$errorCapture = " & If ( not IsEmpty ( $errorCapture ) ; $errorCapture ; True );
		);
		[ ¶ ; ";¶" ]
	)
	& ";" & ErrorData & ";¶"
)

/*
Unit tests
Using #Assign to make sure the Error variables will be set.

#Assign ( Error );
*/

/*
# Example script with various types of calls using Error()

# Standard FileMaker error with presets
Set Variable [ $errorHalt; Value:False ]
Set Variable [ $errorDialog; Value:False ]
Set Variable [ $errorCapture; Value:False ]
Perform Script [ “Handle Error ( error )”; Parameter: # ( "$error" ; Error ) ]
#----------------------------------
# Standard FileMaker error with inline overrides (simplified from above)
Perform Script [ “Handle Error ( error )”; Parameter: # ( "$error" ; Error & # ( "$errorHalt" ; False ) & # ( "$errorDialog" ; False ) & # ( "$errorCapture" ; False ) ) ]
#----------------------------------
# Custom Application error
# (see SetError fuction)
Perform Script [ “Handle Error ( error )”; Parameter: # ( "$error" ; SetError ( "app" ; 200 ; True ; True ; False ) ) ]
#
Exit Script [ Result: List ( # ( "$result" ; True ) ; # ( "$error" ; Error ) ) ]

*/