/**
 * =====================================
 * #GetNameList ( parameters )
 *
 * RETURNS:
 *		A return-delimited list of names from the name-value pairs in parameters.
 *
 * PARAMETERS:
 *		parameters: A string of serialized name-value pair data in Let notation.
 *
 * EXAMPLE:
 *		#GetNameList (
 *			# ( "name" ; "value" )
 *			& # ( "foo" ; "bar" );
 *		) = List ( "name" ; "foo" )
 *
 * DEPENDENCIES: none
 *
 * HISTORY:
 *		MODIFIED on 2013-12-24 by Jeremy Bante <http://scr.im/jbante> to improve
 *		efficiency.
 *		MODIFIED on 2013-12-23 by John Jones john.christopher@alumni.virginia.edu
 *		to use Position/Middle.
 *		CREATED on 2013-01-24 by Daniel Smith dansmith65@gmail.com
 * =====================================
 */

Case (
	/* Step 0, set-up */
	not $#GetNameList.step ;
		Let ( [
			~empty = IsEmpty ( Trim ( parameters ) ) ;
			parameters =
				Substitute (
					¶ & parameters ;
					[ "¶$" ; ¶ ] ;		// remove "$" prefix
					[ "¶$" ; ¶ ] ;		// remove "$$" prefix
					[ "¶¶" ; ¶ ]		// remove empty values
				) ;
			$#GetNameList.length = Length ( parameters ) ;
			$#GetNameList.step = If ( ~empty ; 2 ; /* Else */ 1 )
		] ;
			#GetNameList ( parameters )
		) ;

	/* Step 1, check each parameter */
	$#GetNameList.step = 1 ;
		Let ( [
			~start = $#GetNameList.end + 1 ;
			$#GetNameList.end = Position ( parameters ; ¶ ; ~start ; 1 ) ;
			~endOfList = $#GetNameList.end = 0 ;
			~length =
				If ( ~endOfList ;
					$#GetNameList.length + 1 ;
					/* Else */ $#GetNameList.end
				)
				- ~start ;
			~pair = Middle ( parameters ; ~start ; ~length ) ;
			~name = Left ( ~pair ; Position ( ~pair ; " = " ; 1 ; 1 ) - 1 ) ;
			~include =	// only include ~name if it isn't already in the result
				Position (
					¶ & $#GetNameList.result & ¶ ;
					¶ & ~name & ¶ ;
					1 ;
					1
				) = 0 ;
			$#GetNameList.result =
				List (
					$#GetNameList.result ;
					If ( ~include ; ~name )
				) ;

			~endOfList =
				~endOfList
				or $#GetNameList.end ≥ $#GetNameList.length ;
			$#GetNameList.step =
				If ( ~endOfList ;
					$#GetNameList.step + 1 ;
					/* Else */ $#GetNameList.step
				)
		] ;
			#GetNameList ( parameters )
		) ;

	/* Step 2, clean-up and return result */
	$#GetNameList.step = 2 ;
		Let ( [
			~result = $#GetNameList.result ;

			// purge variables
			$#GetNameList.end = "" ;
			$#GetNameList.length = "" ;
			$#GetNameList.result = "" ;
			$#GetNameList.step = ""
		] ;
			~result
		)
)